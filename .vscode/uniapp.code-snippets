{
  // Place your uniapp-vue2-ts-template 工作区 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  "打印日志信息 console.log()": {
    "scope": "javascript,typescript",
    "prefix": "log",
    "body": ["console.log('$1');", "$2"],
    "description": "打印常规日志,始终在控制台显示,生产模式会删除所有console.log"
  },
  "打印调试信息 console.debug()": {
    "scope": "javascript,typescript",
    "prefix": "debug",
    "body": ["console.debug('$1');", "$2"],
    "description": "将开发者工具里把日志登等级调整为Verbos(详细)即可在控制台看到输出的调试信息"
  },
  "快速生成uni页面": {
    "prefix": "uni-pages",
    "body": [
      "<template>",
      "  <custom-pages-container class=\"$2\">",
      "    <!-- 如果出现两个标题栏，请检查pages.json中配置的style.navigationStyle -->",
      "    <u-navbar",
      "      :fixed=\"false\"",
      "      title=\"这里是标题\"",
      "      auto-back",
      "    />",
      "    <view>",
      "      这里是内容",
      "    </view>",
      "  </custom-pages-container>",
      "</template>",
      "",
      "<script lang=\"ts\">",
      "import Vue from 'vue';",
      "import { mapActions, mapGetters } from 'vuex';",
      "import store from '@/store';",
      "import Component from 'vue-class-component';",
      "import { UNKNOWN_NAME } from '@/constants';",
      "import TopStatusBarPlaceholder from '@/components/top-status-bar-placeholder/index.vue';",
      "// import { Sex } from '@/constants';",
      "// 对象定义,通用的定义应该放在src/typings中",
      "// interface UserInfo {",
      "//   name: string;",
      "//   sex: Sex;",
      "//   age?: number;",
      "// }",
      "",
      "const router = getCurrentPages();",
      "console.debug('router:', router);",
      "",
      "const $1 = Vue.extend({",
      "  name: '$2',",
      "});",
      "",
      "@Component<$3>({",
      "  components: {",
      "    TopStatusBarPlaceholder,",
      "  },",
      "  computed: {",
      "    ...mapGetters({",
      "      formatDate: 'app/formatDate',",
      "    }),",
      "    now() {",
      "      return store.state.app.now;",
      "    },",
      "  },",
      "  watch: {},",
      "  methods: {",
      "    ...mapActions({",
      "      updateTime: 'app/asyncUpdateNow',",
      "    })",
      "  },",
      "})",
      "export default class $3 extends $1 {",
      "  formatDate!: string;",
      "  now!: number;",
      "  updateTime!: () => Promise<void>;",
      "  message = 'hello world';",
      "  userInfo: UserInfo | undefined = undefined;",
      "  data() {",
      "    return {",
      "      userInfo: undefined,",
      "    };",
      "  }",
      "  get age() {",
      "    const { userInfo } = this;",
      "    return userInfo ? userInfo.age : '/';",
      "  }",
      "  get username(): string {",
      "    const { userInfo } = this;",
      "    return userInfo ? userInfo.name : UNKNOWN_NAME;",
      "  }",
      "  /**",
      "   * 页面生命周期",
      "   * @see https://uniapp.dcloud.net.cn/tutorial/page.html#lifecycle",
      "   */",
      "  onInit() {}",
      "  onLoad() {",
      "    console.debug('$2 executive beforeCreate.');",
      "  }",
      "  onShow() {}",
      "  onReady() {}",
      "  onHide() {}",
      "  onUnload() {}",
      "  onResize() {}",
      "  onPullDownRefresh() {}",
      "  onReachBottom() {}",
      "  onTabItemTap() {}",
      "  onShareAppMessage() {}",
      "  onPageScroll() {}",
      "  onNavigationBarButtonTap() {}",
      "  onBackPress() {}",
      "  onNavigationBarSearchInputChanged() {}",
      "  onNavigationBarSearchInputConfirmed() {}",
      "  onNavigationBarSearchInputClicked() {}",
      "  onShareTimeline() {}",
      "  onAddToFavorites() {}",
      "  /**",
      "   * 在实例初始化之前被调用。详见",
      "   * @see https://cn.vuejs.org/v2/api/#beforeCreate",
      "   */",
      "  beforeCreate() {",
      "    console.debug('$2 executive beforeCreate.');",
      "  }",
      "  /**",
      "   * 在实例创建完成后被立即调用。详见",
      "   * @see https://cn.vuejs.org/v2/api/#created",
      "   */",
      "  created() {",
      "    console.debug('$2 executive created.');",
      "    this.initData();",
      "    this.initUserInfo();",
      "  }",
      "  /**",
      "   * 在挂载开始之前被调用。详见",
      "   * @see https://cn.vuejs.org/v2/api/#beforeMount",
      "   */",
      "  beforeMount() {",
      "    console.debug('$2 executive beforeMount.');",
      "  }",
      "  /**",
      "   * 挂载到实例上去之后调用。详见",
      "   * @see https://cn.vuejs.org/v2/api/#mounted",
      "   * 注意：此处并不能确定子组件被全部挂载，如果需要子组件完全挂载之后在执行操作可以使用nextTickVue",
      "   * @see https://cn.vuejs.org/v2/api/#Vue-nextTick",
      "   */",
      "  mounted() {",
      "    console.debug('$2 executive mounted.');",
      "  }",
      "  /**",
      "   * 数据更新时调用，发生在虚拟 DOM 打补丁之前。详见",
      "   * @see https://cn.vuejs.org/v2/api/#beforeUpdate",
      "   */",
      "  beforeUpdate() {",
      "    console.debug('$2 executive beforeUpdate.');",
      "  }",
      "  /**",
      "   * 由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。详见",
      "   * @see https://cn.vuejs.org/v2/api/#updated",
      "   */",
      "  updated() {",
      "    console.debug('$2 executive updated.');",
      "  }",
      "  /**",
      "   * 实例销毁之前调用。在这一步，实例仍然完全可用。详见",
      "   * @see https://cn.vuejs.org/v2/api/#beforeDestroy",
      "   */",
      "  beforeDestroy() {",
      "    console.debug('$2 executive beforeDestroy.');",
      "  }",
      "  /**",
      "   * Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 详见",
      "   * @see https://cn.vuejs.org/v2/api/#destroyed",
      "   */",
      "  destroyed() {",
      "    console.debug('$2 executive destroyed.');",
      "  }",
      "  async initData() {",
      "    const result = await this.getData();",
      "    console.log(result);",
      "  }",
      "  async getData() {",
      "    this.\\$u.toast(this.formatDate);",
      "    return new Promise<number>((resolve) => {",
      "      setTimeout(() => {",
      "        resolve(Math.random());",
      "      }, 1000);",
      "    });",
      "  }",
      "  async initUserInfo() {",
      "    try {",
      "      const userInfo = await this.\\$api.http.getUserInfo();",
      "      this.userInfo = userInfo;",
      "    } catch (error) {",
      "      console.error(error);",
      "    }",
      "  }",
      "}",
      "</script>",
      "",
      "<style lang=\"scss\" scoped>",
      ".$2 {",
      "  width: 750rpx;",
      "}",
      "</style>",
      ""
    ],
    "description": "快速生成uni页面"
  },
  "快速生成uniapp简单页面": {
    "prefix": "uni-pages-simple",
    "body": [
      "<template>",
      "  <custom-pages-container class=\"$2\">",
      "    <!-- 如果出现两个标题栏，请检查pages.json中配置的style.navigationStyle -->",
      "    <u-navbar",
      "      :fixed=\"false\"",
      "      title=\"这里是标题\"",
      "      auto-back",
      "    />",
      "    <view>",
      "      这里是内容",
      "    </view>",
      "  </custom-pages-container>",
      "</template>",
      "",
      "<script lang=\"ts\">",
      "import { EDIT_TYPE } from '@/constants';",
      "import Vue from 'vue';",
      "import Component from 'vue-class-component';",
      "",
      "const router = getCurrentPages();",
      "console.debug('router:', router);",
      "",
      "const $1Props = Vue.extend({",
      "  name: '$2',",
      "  props: {},",
      "});",
      "",
      "@Component<$1>({",
      "  components: {",
      "  },",
      "  computed: {},",
      "  watch: {},",
      "  methods: {},",
      "})",
      "export default class $1 extends $1Props {",
      "  toSupplierInfoPagesHandler() {",
      "    this.\\$Router.push({",
      "      path: '/pages/stock-manager/supplier-info/index',",
      "      query: {",
      "        editType: EDIT_TYPE.ADD,",
      "      }",
      "    });",
      "  }",
      "}",
      "</script>",
      "",
      "<style lang=\"scss\" scoped>",
      ".$2 {",
      "  width: 750rpx;",
      "}",
      "</style>",
      ""
    ],
    "description": "快速生成uniapp简单页面"
  },
  "快速生成uni组件": {
    "prefix": "uni-components",
    "body": [
      "<template>",
      "  <view class=\"$2\">",
      "    <top-status-bar-placeholder />",
      "    <image class=\"logo\" src=\"@/assets/uni-h5-hosting-qr.png\" />",
      "    {{ JSON.stringify(userInfo) }}",
      "  </view>",
      "</template>",
      "",
      "<script lang=\"ts\">",
      "import Vue from 'vue';",
      "import { mapActions, mapGetters } from 'vuex';",
      "import store from '@/store';",
      "import Component from 'vue-class-component';",
      "import { UNKNOWN_NAME } from '@/constants';",
      "import TopStatusBarPlaceholder from '@/components/top-status-bar-placeholder/index.vue';",
      "// import { Sex } from '@/constants';",
      "// 对象定义,通用的定义应该放在src/typings中",
      "// interface UserInfo {",
      "//   name: string;",
      "//   sex: Sex;",
      "//   age?: number;",
      "// }",
      "",
      "const router = getCurrentPages();",
      "console.debug('router:', router);",
      "",
      "const $1Props = Vue.extend({",
      "  name: '$2',",
      "});",
      "",
      "@Component<$1>({",
      "  components: {",
      "    TopStatusBarPlaceholder,",
      "  },",
      "  computed: {",
      "    ...mapGetters({",
      "      formatDate: 'app/formatDate',",
      "    }),",
      "    now() {",
      "      return store.state.app.now;",
      "    },",
      "  },",
      "  watch: {},",
      "  methods: {",
      "    ...mapActions({",
      "      updateTime: 'app/asyncUpdateNow',",
      "    })",
      "  },",
      "})",
      "export default class $1 extends PagesMyIndexProps {",
      "  formatDate!: string;",
      "  now!: number;",
      "  updateTime!: () => Promise<void>;",
      "  message = 'hello world';",
      "  userInfo: UserInfo | undefined = undefined;",
      "  data() {",
      "    return {",
      "      userInfo: undefined,",
      "    };",
      "  }",
      "  get age() {",
      "    const { userInfo } = this;",
      "    return userInfo ? userInfo.age : '/';",
      "  }",
      "  get username(): string {",
      "    const { userInfo } = this;",
      "    return userInfo ? userInfo.name : UNKNOWN_NAME;",
      "  }",
      "  /**",
      "   * 在实例初始化之前被调用。详见",
      "   * @see https://cn.vuejs.org/v2/api/#beforeCreate",
      "   */",
      "  beforeCreate() {",
      "    console.debug('$2 executive beforeCreate.');",
      "  }",
      "  /**",
      "   * 在实例创建完成后被立即调用。详见",
      "   * @see https://cn.vuejs.org/v2/api/#created",
      "   */",
      "  created() {",
      "    console.debug('$2 executive created.');",
      "    this.initData();",
      "    this.initUserInfo();",
      "  }",
      "  /**",
      "   * 在挂载开始之前被调用。详见",
      "   * @see https://cn.vuejs.org/v2/api/#beforeMount",
      "   */",
      "  beforeMount() {",
      "    console.debug('$2 executive beforeMount.');",
      "  }",
      "  /**",
      "   * 挂载到实例上去之后调用。详见",
      "   * @see https://cn.vuejs.org/v2/api/#mounted",
      "   * 注意：此处并不能确定子组件被全部挂载，如果需要子组件完全挂载之后在执行操作可以使用nextTickVue",
      "   * @see https://cn.vuejs.org/v2/api/#Vue-nextTick",
      "   */",
      "  mounted() {",
      "    console.debug('$2 executive mounted.');",
      "  }",
      "  /**",
      "   * 数据更新时调用，发生在虚拟 DOM 打补丁之前。详见",
      "   * @see https://cn.vuejs.org/v2/api/#beforeUpdate",
      "   */",
      "  beforeUpdate() {",
      "    console.debug('$2 executive beforeUpdate.');",
      "  }",
      "  /**",
      "   * 由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。详见",
      "   * @see https://cn.vuejs.org/v2/api/#updated",
      "   */",
      "  updated() {",
      "    console.debug('$2 executive updated.');",
      "  }",
      "  /**",
      "   * 实例销毁之前调用。在这一步，实例仍然完全可用。详见",
      "   * @see https://cn.vuejs.org/v2/api/#beforeDestroy",
      "   */",
      "  beforeDestroy() {",
      "    console.debug('$2 executive beforeDestroy.');",
      "  }",
      "  /**",
      "   * Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 详见",
      "   * @see https://cn.vuejs.org/v2/api/#destroyed",
      "   */",
      "  destroyed() {",
      "    console.debug('$2 executive destroyed.');",
      "  }",
      "  async initData() {",
      "    const result = await this.getData();",
      "    console.log(result);",
      "  }",
      "  async getData() {",
      "    this.\\$u.toast(this.formatDate);",
      "    return new Promise<number>((resolve) => {",
      "      setTimeout(() => {",
      "        resolve(Math.random());",
      "      }, 1000);",
      "    });",
      "  }",
      "  async initUserInfo() {",
      "    try {",
      "      const userInfo = await this.\\$api.http.getUserInfo();",
      "      this.userInfo = userInfo;",
      "    } catch (error) {",
      "      console.error(error);",
      "    }",
      "  }",
      "}",
      "</script>",
      "",
      "<style lang=\"scss\" scoped>",
      ".$2 {",
      "  width: 750rpx;",
      "}",
      "</style>",
      ""
    ],
    "description": "快速生成uni组件"
  },
  "快速生成uni组件-1": {
    "prefix": "uni-components-1",
    "body": [
      "<template>",
      "  <view class=\"$2\">",
      "    <top-status-bar-placeholder />",
      "    <image class=\"logo\" src=\"@/assets/uni-h5-hosting-qr.png\" />",
      "    {{ JSON.stringify(userInfo) }}",
      "  </view>",
      "</template>",
      "",
      "<script lang=\"ts\">",
      "import Vue, { PropType } from 'vue';",
      "import { mapActions, mapGetters } from 'vuex';",
      "import store from '@/store';",
      "import Component from 'vue-class-component';",
      "import { UNKNOWN_NAME } from '@/constants';",
      "import TopStatusBarPlaceholder from '@/components/top-status-bar-placeholder/index.vue';",
      "// import { Sex } from '@/constants';",
      "// 对象定义,通用的定义应该放在src/typings中",
      "// interface UserInfo {",
      "//   name: string;",
      "//   sex: Sex;",
      "//   age?: number;",
      "// }",
      "",
      "const router = getCurrentPages();",
      "console.debug('router:', router);",
      "",
      "const $1Props = Vue.extend({",
      "  name: '$2',",
      "  props: {",
      "    userInfo: {",
      "      type: Object as PropType<UserInfo>,",
      "      required: false,",
      "      default: undefined,",
      "    },",
      "    title: {",
      "      type: String,",
      "      required: true,",
      "    },",
      "    callback: {",
      "      type: Function as PropType<() => void>,",
      "      default() {",
      "        return () => console.debug('$2 executive default callback');",
      "      },",
      "    },",
      "  },",
      "});",
      "",
      "@Component<$1>({",
      "  components: {",
      "    TopStatusBarPlaceholder,",
      "  },",
      "  computed: {",
      "    ...mapGetters({",
      "      formatDate: 'app/formatDate',",
      "    }),",
      "    now() {",
      "      return store.state.app.now;",
      "    },",
      "  },",
      "  watch: {},",
      "  methods: {",
      "    ...mapActions({",
      "      updateTime: 'app/asyncUpdateNow',",
      "    })",
      "  },",
      "})",
      "export default class $1 extends $1Props {",
      "  formatDate!: string;",
      "  now!: number;",
      "  updateTime!: () => Promise<void>;",
      "  message = 'hello world';",
      "  user = this.userInfo;",
      "  get age() {",
      "    const { user } = this;",
      "    return user ? user.age : '/';",
      "  }",
      "  get username(): string {",
      "    const { user } = this;",
      "    return user ? user.name : UNKNOWN_NAME;",
      "  }",
      "  /**",
      "   * 在实例初始化之前被调用。详见",
      "   * @see https://cn.vuejs.org/v2/api/#beforeCreate",
      "   */",
      "  beforeCreate() {",
      "    console.debug('$2 executive beforeCreate.');",
      "  }",
      "  /**",
      "   * 在实例创建完成后被立即调用。详见",
      "   * @see https://cn.vuejs.org/v2/api/#created",
      "   */",
      "  created() {",
      "    console.debug('$2 executive created.');",
      "    this.initData();",
      "  }",
      "  /**",
      "   * 在挂载开始之前被调用。详见",
      "   * @see https://cn.vuejs.org/v2/api/#beforeMount",
      "   */",
      "  beforeMount() {",
      "    console.debug('$2 executive beforeMount.');",
      "  }",
      "  /**",
      "   * 挂载到实例上去之后调用。详见",
      "   * @see https://cn.vuejs.org/v2/api/#mounted",
      "   * 注意：此处并不能确定子组件被全部挂载，如果需要子组件完全挂载之后在执行操作可以使用nextTickVue",
      "   * @see https://cn.vuejs.org/v2/api/#Vue-nextTick",
      "   */",
      "  mounted() {",
      "    console.debug('$2 executive mounted.');",
      "  }",
      "  /**",
      "   * 数据更新时调用，发生在虚拟 DOM 打补丁之前。详见",
      "   * @see https://cn.vuejs.org/v2/api/#beforeUpdate",
      "   */",
      "  beforeUpdate() {",
      "    console.debug('$2 executive beforeUpdate.');",
      "  }",
      "  /**",
      "   * 由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。详见",
      "   * @see https://cn.vuejs.org/v2/api/#updated",
      "   */",
      "  updated() {",
      "    console.debug('$2 executive updated.');",
      "  }",
      "  /**",
      "   * 实例销毁之前调用。在这一步，实例仍然完全可用。详见",
      "   * @see https://cn.vuejs.org/v2/api/#beforeDestroy",
      "   */",
      "  beforeDestroy() {",
      "    console.debug('$2 executive beforeDestroy.');",
      "  }",
      "  /**",
      "   * Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 详见",
      "   * @see https://cn.vuejs.org/v2/api/#destroyed",
      "   */",
      "  destroyed() {",
      "    console.debug('$2 executive destroyed.');",
      "  }",
      "  async initData() {",
      "    const result = await this.getData();",
      "    console.log(result);",
      "  }",
      "  async getData() {",
      "    this.\\$u.toast(this.formatDate);",
      "    return new Promise<number>((resolve) => {",
      "      setTimeout(() => {",
      "        resolve(Math.random());",
      "      }, 1000);",
      "    });",
      "  }",
      "}",
      "</script>",
      "",
      "<style lang=\"scss\" scoped>",
      ".$2 {",
      "  width: 750rpx;",
      "}",
      "</style>",
      ""
    ],
    "description": "快速生成uni组件-1"
  },
  "超简组件": {
    "prefix": "uni-component-mini",
    "body": [
      "<template>",
      "  <view class=\"$2\">",
      "    极简uniapp组件",
      "  </view>",
      "</template>",
      "",
      "<script lang=\"ts\">",
      "import Vue from 'vue';",
      "import Component from 'vue-class-component';",
      "",
      "const $1Props = Vue.extend({",
      "  name: '$2',",
      "  props: {},",
      "});",
      "",
      "@Component<$1>({",
      "  components: {},",
      "  computed: {},",
      "  watch: {},",
      "  methods: {},",
      "})",
      "export default class $1 extends $1Props {",
      "}",
      "</script>",
      "",
      "<style lang=\"scss\" scoped>",
      ".$2 {",
      "",
      "}",
      "</style>",
      ""
    ],
    "description": "超简组件"
  },
}
